diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..70e34ec
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,3 @@
+{
+    "C_Cpp.errorSquiggles": "disabled"
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index b971308..599e02b 100644
--- a/Makefile
+++ b/Makefile
@@ -143,6 +143,7 @@ mkfs/mkfs: mkfs/mkfs.c $K/fs.h $K/param.h
 UPROGS=\
 	$U/_cat\
 	$U/_echo\
+	$U/_find\
 	$U/_forktest\
 	$U/_grep\
 	$U/_init\
@@ -150,8 +151,10 @@ UPROGS=\
 	$U/_ln\
 	$U/_ls\
 	$U/_mkdir\
+	$U/_pingpong\
 	$U/_rm\
 	$U/_sh\
+	$U/_sleep\
 	$U/_stressfs\
 	$U/_usertests\
 	$U/_grind\
@@ -242,15 +245,8 @@ qemu-gdb: $K/kernel .gdbinit fs.img
 	@echo "*** Now run 'gdb' in another window." 1>&2
 	$(QEMU) $(QEMUOPTS) -S $(QEMUGDB)
 
-GDBARGS = 
-GDBARGS += -ex 'set architecture riscv:rv64'
-GDBARGS += -ex 'target remote 127.0.0.1:$(GDBPORT)'
-GDBARGS += -ex 'symbol-file kernel/kernel'
-GDBARGS += -ex 'set riscv use-compressed-breakpoints yes'
-
-
 gdb: 
-	$(GDB) $(GDBARGS)
+	$(GDB)
 
 ##
 ##  FOR testing lab grading script
diff --git a/commands.gdb b/commands.gdb
new file mode 100644
index 0000000..d18c045
--- /dev/null
+++ b/commands.gdb
@@ -0,0 +1,6 @@
+b trap.c:55
+c
+p cpus[$tp]->proc->name 
+n
+p cpus[$tp]->proc->name 
+da
\ No newline at end of file
diff --git a/user/find.c b/user/find.c
new file mode 100644
index 0000000..d1dc8d3
--- /dev/null
+++ b/user/find.c
@@ -0,0 +1,68 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+
+void find(char *path, char *filename) {
+    char buf[512], *p;
+    int fd;
+    struct dirent de;
+    struct stat st;
+
+    if ((fd = open(path, 0)) < 0) {
+        fprintf(2, "find: cannot open %s\n", path);
+        return;
+    }
+
+    if (fstat(fd, &st) < 0) {
+        fprintf(2, "find: cannot stat %s\n", path);
+        close(fd);
+        return;
+    }
+
+    if (st.type != T_DIR) {
+        fprintf(2, "find: path should be directory\n");
+        close(fd);
+        return;
+    }
+
+    strcpy(buf, path);               // copy path
+    p = buf + strlen(buf);     
+    *p++ = '/';                      // end of path append '/'  
+    while (read(fd, &de, sizeof(de)) == sizeof(de)) {
+        if (de.inum == 0) continue;
+        memmove(p, de.name, DIRSIZ);
+        p[DIRSIZ] = 0;               // 指针p用于做完整的buf目录，用buf读一个该文件stat
+        if (stat(buf, &st) < 0) {
+            printf("cannot stat %s\n", buf);
+            continue;
+        }
+        switch (st.type) {
+            case T_FILE:
+                if (strcmp(filename, de.name) == 0) {
+                    printf("%s\n", buf);
+                }
+                break;
+
+            case T_DIR:
+                if (strcmp(filename, de.name) == 0) {
+                    printf("%s\n", buf);
+                }
+                if (strcmp(de.name, ".") != 0 && strcmp(de.name, "..") != 0) {
+                    find(buf, filename);
+                }
+                break;
+        }
+    }
+    close(fd);
+}
+
+int main(int argc, char *argv[]) {
+    if (argc != 3) {
+        printf("find need 2 parameters!");
+        exit(1);
+    }
+    find(argv[1], argv[2]);   // argv[1] = path   argv[2] = filename
+    exit(0);
+}
+
diff --git a/user/pingpong.c b/user/pingpong.c
new file mode 100644
index 0000000..42b4fc7
--- /dev/null
+++ b/user/pingpong.c
@@ -0,0 +1,38 @@
+#include "kernel/types.h"
+#include "user.h"
+
+int main(int argc, char* argv[]) {
+    int c2f[2];      // Pipe for child to father
+    int f2c[2];      // Pipe for father to child
+    pipe(c2f);
+    pipe(f2c);
+    int pid = fork();
+    if (pid < 0) {
+        // fork() 返回值如果是负数就是错误的
+        exit(1);
+    } else if (pid == 0) {
+        // child 
+        close(f2c[1]);
+        close(c2f[0]);
+        int recieved_father_id;
+        int child_id = getpid();
+        read(f2c[0], &recieved_father_id, sizeof(int));
+        close(f2c[0]);
+        printf("%d: received ping from pid %d\n", child_id, recieved_father_id);
+        write(c2f[1], &child_id, 4);
+        close(c2f[1]);
+        exit(0);
+    } else {
+        // father
+        close(f2c[0]);
+        close(c2f[1]);
+        int father_id = getpid();
+        int received_child_id;
+        write(f2c[1], &father_id, 4);
+        close(f2c[1]);
+        read(c2f[0], &received_child_id, sizeof(int));
+        close(c2f[0]);
+        printf("%d: received pong from pid %d\n", father_id, received_child_id);
+        exit(0);
+    }
+}
\ No newline at end of file
diff --git a/user/sleep.c b/user/sleep.c
new file mode 100644
index 0000000..69c8e67
--- /dev/null
+++ b/user/sleep.c
@@ -0,0 +1,15 @@
+#include "kernel/types.h"
+#include "user.h"
+
+int main(int argc, char* argv[]) {
+    if(argc != 2) {
+        printf("Sleep needs one argument!\n");  // 检查参数数量是否正确
+        exit(-1);
+    
+    
+    }
+    int ticks = atoi(argv[1]);   // 将字符串参数转为整数
+    sleep(ticks);               // 使用系统调用 sleep
+    printf("(nothing happens for a little while)\n");
+    exit(0);  // 确保退出
+}
\ No newline at end of file
