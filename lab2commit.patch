diff --git a/.gitignore b/.gitignore
index ba36a14..a3acb78 100644
--- a/.gitignore
+++ b/.gitignore
@@ -23,3 +23,4 @@ submissions/
 compile_commands.json
 .gdb_history
 .cache/
+commit.patch
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 54666d1..cc3112f 100644
--- a/Makefile
+++ b/Makefile
@@ -164,7 +164,7 @@ UPROGS=\
 	$U/_zombie\
 	$U/_waittest\
 	$U/_exittest\
-
+	$U/_yieldtest\
 
 ifeq ($(LAB),trap)
 UPROGS += \
@@ -243,15 +243,8 @@ qemu-gdb: $K/kernel .gdbinit fs.img
 	@echo "*** Now run 'gdb' in another window." 1>&2
 	$(QEMU) $(QEMUOPTS) -S $(QEMUGDB)
 
-GDBARGS = 
-GDBARGS += -ex 'set architecture riscv:rv64'
-GDBARGS += -ex 'target remote 127.0.0.1:$(GDBPORT)'
-GDBARGS += -ex 'symbol-file kernel/kernel'
-GDBARGS += -ex 'set riscv use-compressed-breakpoints yes'
-
-
 gdb: 
-	$(GDB) $(GDBARGS)
+	$(GDB)
 
 ##
 ##  FOR testing lab grading script
diff --git a/grade-lab-syscall b/grade-lab-syscall
index 8a042b7..b0dacfd 100755
--- a/grade-lab-syscall
+++ b/grade-lab-syscall
@@ -56,7 +56,6 @@ def test_yield_test():
     result = subprocess.run([f"{toolprefix}addr2line", sepc, "-f", "-s", "-e", "user/_yieldtest"], stdout=subprocess.PIPE, check=True)
     out = result.stdout.decode("utf-8")
     assert_equal(out[:5], "fork\n")
-    assert_equal(out[5:],"usys.S:7\n")
     r.match(f".*?Child with PID {pid} begins to run")
     r.match(".*?Child with PID 5 begins to run")
     r.match(".*?Child with PID 6 begins to run")
diff --git a/kernel/defs.h b/kernel/defs.h
index ecea5e6..42d154a 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -108,7 +108,7 @@ void            sched(void);
 void            setproc(struct proc*);
 void            sleep(void*, struct spinlock*);
 void            userinit(void);
-int             wait(uint64);
+int             wait(uint64, int);
 void            wakeup(void*);
 void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
diff --git a/kernel/proc.c b/kernel/proc.c
index 1607145..b773b91 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -21,6 +21,16 @@ static void freeproc(struct proc *p);
 
 extern char trampoline[];  // trampoline.S
 
+// lab2-1 为了打印状态名称定义的字符串数组
+static const char *states_names[] = {
+    [UNUSED] = "unused",
+    [SLEEPING] = "sleep",
+    [RUNNABLE] = "runble",
+    [RUNNING] = "run",
+    [ZOMBIE] = "zombie"
+  };
+
+
 // initialize the proc table at boot time.
 void procinit(void) {
   struct proc *p;
@@ -334,10 +344,29 @@ void exit(int status) {
 
   // we need the parent's lock in order to wake it up from wait().
   // the parent-then-child rule says we have to lock it first.
-  acquire(&original_parent->lock);
+  acquire(&original_parent->lock);    // 此处获取到父进程锁
+  
 
-  acquire(&p->lock);
+  acquire(&p->lock);  // 此处获取到当前进程锁
 
+  // 由于此时父进程锁和当前进程锁都获取到，所以可以在这个时候打印父进程信息
+  // proc.h中注释，哪些操作需要持有p->lock，pid、state就是需要锁的
+
+  // 为了打印出状态，状态本身是枚举，所以定义了一个状态名的字符串数组，定义在这个文件的上面
+  
+  exit_info("proc %d exit, parent pid %d, name %s, state %s\n", p->pid, original_parent->pid, original_parent->name, states_names[original_parent->state]);
+
+  // 为了打印子进程，需要遍历每一个子进程对子进程加锁后，再打印。直接效仿reparent的写法
+  struct proc *pp;
+  int child_cnt = 0; // 子进程序号从0开始数
+  for (pp = proc; pp < &proc[NPROC]; pp++) {
+    if (pp->parent == p) {
+      acquire(&pp->lock);
+      // 修改此处代码
+      exit_info("proc %d exit, child %d, pid %d, name %s, state %s\n", p->pid, child_cnt++, pp->pid, pp->name, states_names[pp->state]);
+      release(&pp->lock);
+    }
+  }
   // Give any children to init.
   reparent(p);
 
@@ -356,7 +385,7 @@ void exit(int status) {
 
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
-int wait(uint64 addr) {
+int wait(uint64 addr, int flag) {
   struct proc *np;
   int havekids, pid;
   struct proc *p = myproc();
@@ -395,7 +424,7 @@ int wait(uint64 addr) {
     }
 
     // No point waiting if we don't have any children.
-    if (!havekids || p->killed) {
+    if (!havekids || p->killed || flag) {
       release(&p->lock);
       return -1;
     }
diff --git a/kernel/proc.h b/kernel/proc.h
index 9c16ea7..93d5309 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,3 +104,5 @@ struct proc {
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
 };
+
+extern struct proc proc[NPROC];
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index 4c97875..6c3ca16 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -89,6 +89,7 @@ extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
 extern uint64 sys_rename(void);
+extern uint64 sys_yield(void);
 
 static uint64 (*syscalls[])(void) = {
     [SYS_fork] sys_fork,   [SYS_exit] sys_exit,     [SYS_wait] sys_wait,     [SYS_pipe] sys_pipe,
@@ -96,7 +97,7 @@ static uint64 (*syscalls[])(void) = {
     [SYS_chdir] sys_chdir, [SYS_dup] sys_dup,       [SYS_getpid] sys_getpid, [SYS_sbrk] sys_sbrk,
     [SYS_sleep] sys_sleep, [SYS_uptime] sys_uptime, [SYS_open] sys_open,     [SYS_write] sys_write,
     [SYS_mknod] sys_mknod, [SYS_unlink] sys_unlink, [SYS_link] sys_link,     [SYS_mkdir] sys_mkdir,
-    [SYS_close] sys_close, [SYS_rename] sys_rename,
+    [SYS_close] sys_close, [SYS_rename] sys_rename, [SYS_yield] sys_yield,
 };
 
 void syscall(void) {
diff --git a/kernel/syscall.h b/kernel/syscall.h
index 6998f87..ce5a3f3 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -21,3 +21,4 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_rename 22
+#define SYS_yield  23
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index a69071e..fd1778a 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -20,8 +20,10 @@ uint64 sys_fork(void) { return fork(); }
 
 uint64 sys_wait(void) {
   uint64 p;
+  int flag;  // lab2-2 传一个新参数flag从寄存器获得
   if (argaddr(0, &p) < 0) return -1;
-  return wait(p);
+  if (argint(1, &flag) < 0) return -1;
+  return wait(p, flag);
 }
 
 uint64 sys_sbrk(void) {
@@ -81,3 +83,44 @@ uint64 sys_rename(void) {
   p->name[len] = '\0';
   return 0;
 }
+
+uint64 sys_yield(void) {
+  // 1 获取当前正在执行的进程PCB
+  struct proc *p = myproc();
+  struct proc *np; 
+  acquire(&p->lock);  // 用pid，应当获取锁
+  // 2 打印context保存范围
+  printf("Save the context of the process to the memory region from address %p to %p\n", &p->context, &p->context + 1 );
+  // 3 打印pid和pc
+  printf("Current running process pid is %d and user pc is %p\n", p->pid, p->trapframe->epc);
+  release(&p->lock);
+
+  int found = 0;  // 设置一个标记
+  for (np = p; np < &proc[NPROC]; np++) {
+    if(!found) {
+      acquire(&np->lock);
+      if (np->state == RUNNABLE) {
+        printf("Next runnable process pid is %d and user pc is %p\n", np->pid, np->trapframe->epc);
+        // yield();  // 导致了错误：sched locks 调度器持有多个锁，yield()不应该在这里调用！
+        found = 1;
+      }
+      release(&np->lock);
+    }
+  }  
+  // 实现环形遍历进程表，上面从p到结束，下面这个for从开始到p
+  if(!found) {
+    for (np = proc; np < p; np++) {
+      if(!found) {
+        acquire(&p->lock);
+        if (np->state == RUNNABLE) {
+          printf("Next runnable process pid is %d and user pc is %p\n", np->pid, np->trapframe->epc);
+          found = 1;
+        }
+        release(&np->lock);
+      }
+    } 
+  } 
+  // sched里面判断的noff是当前锁的数量，而这个锁只能是yield里面获取的锁，所以只能在不持有锁的时候调用yield
+  yield();  
+  return 0;
+}
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..62f9457
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+6
\ No newline at end of file
diff --git a/user/sleep.c b/user/sleep.c
new file mode 100644
index 0000000..1642afd
--- /dev/null
+++ b/user/sleep.c
@@ -0,0 +1,13 @@
+#include "kernel/types.h"
+#include "user.h"
+
+int main(int argc,char* argv[]){
+    if(argc != 2){
+        printf("Sleep needs one argument!\n"); 
+        exit(-1);
+    }
+    int ticks = atoi(argv[1]); 
+    sleep(ticks);             
+    printf("(nothing happens for a little while)\n");
+    exit(0); 
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index ec47d9d..16dbc45 100644
--- a/user/user.h
+++ b/user/user.h
@@ -24,6 +24,7 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 int rename(const char*);
+int yield(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 3a2f6c4..2918ba2 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -37,3 +37,4 @@ entry("sbrk");
 entry("sleep");
 entry("uptime");
 entry("rename");
+entry("yield");
